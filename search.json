[
  {
    "objectID": "src/guidelines/index.html",
    "href": "src/guidelines/index.html",
    "title": "Guidelines",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nTitle\n\n\n\n\n\n\nIT Architecture Principles and Implementation Guidelines\n\n\n\n\nIT Architecture Principles and Implementation Guidelines test\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "src/guidelines/IT_Architecture_Principles_and_Implementation_Guidelines.html#reproducibility",
    "href": "src/guidelines/IT_Architecture_Principles_and_Implementation_Guidelines.html#reproducibility",
    "title": "IT Architecture Principles and Implementation Guidelines",
    "section": "4.1 Reproducibility",
    "text": "4.1 Reproducibility\nThe overarching principle of reproducibility is further unfolded below in the following sub-principles:\n\n\n\n\n\n\n\nReproducibility 1:\nDescription of workflows must be provided\n\n\n\n\nWhat:\nDeliverables which are a result of pre-processing of data must be provided with a description of the workflow for the pre-processing\n\n\nWhy:\nTo ensure that the deliverable can be re-produced, details must be provided on how this can be achieved\n\n\nConsequence:\nDescriptions of pre-processing workflow steps are to be provided with deliverables. Ideally the workflows delivered as scripts or similar. At a minimum documentation of how the workflows are to be set up is to be provided\n\n\nExample:\nA delivery that includes a web application, shall include description of the build process, such as the compilation of source code, packaging of the application, and deployment steps. This for instance could include details on the specific versions of tools used (e.g. Node.js, Docker etc.)\n\n\n\n\n\n\n\n\n\n\nReproducibility 2:\nData sources to be supplied with deliverables\n\n\n\n\nWhat:\nIT solutions which utilize data sources must supply the data sources\n\n\nWhy:\nTo ensure that the deliverable can be re-produced details are required on data sources used along with any enrichment which have been applied to the data source\n\n\nConsequence:\nData source location must be provided if data are publicly available. If data are not accessible to the CLMS, the data are to be provided as part of the deliverable\n\n\nExample:\nIf the software relies on a proprietary weather data API that is not publicly accessible, the data, or at least a sample dataset, should be provided with the delivery. If the API is publicly available, detailed instructions on how to access it (e.g., API keys, endpoint URLs) must be included\n\n\n\n\n\n\n\n\n\n\nReproducibility 3:\nList of software used in development of IT solution to be provided\n\n\n\n\nWhat:\nThe software products which have been used in the development of the software are to be listed as part of the deliverable\n\n\nWhy:\nTo ensure that the IT solution can be further developed details are required of the software components/products that were used in the development\n\n\nConsequence:\nList of software development tools used in the production to be provided. Further for client specific developments the source code must also be provided\n\n\nExample:\nA system consisting of several building blocks, such as User Interface, backend, importer, and exporter modules, shall be provided with a list of software development tools, used for production of these building blocks and modules\n\n\n\n\n\n\n\n\n\n\nReproducibility 4:\nAutomation tool/scripts used in the production of the IT solution must be provided\n\n\n\n\nWhat:\nIT solutions which include automation scripts/workflows in the development must supply these scripts as part of the deliverable\n\n\nWhy:\nAutomation scripts used in development are viewed as part of the deliverable and are required for reproduction of the solution\n\n\nConsequence:\nAutomation scripts whether as stand-alone scripts or as a configuration of standard/commercial software must be provided as part of the deliverable\n\n\nExample:\nIf the IT deliverable includes an automatic backup that generates full backups in certain increments, then the automation scripts behind the backup generation must be provided as part of the deliverable, so that they could be recreated\n\n\n\n\n\n\n\n\n\n\nReproducibility 5:\nIf a solution includes outcomes of pre-executed algorithms the prerequisites for running the algorithms must be provided\n\n\n\n\nWhat:\nTo ensure reproducibility, the algorithms must be provided either as pseudo code or as source code\n\n\nWhy:\nThe foundation of the IT solution must be re-producible to ensure future enhancements are possible say if new insights/data become available also after the end of the contractual agreement\n\n\nConsequence:\nSupplier must as part of the deliverable also detail any algorithms which form the basis of the solution\n\n\nExample:\nA spatial product, providing a detailed pan-European wall to wall 10-meter spatial resolution raster product, that is based on a supervised classification of satellite image time-series. The supplier must provide a detailed description of the algorithm that was used for classifying satellite-imagery time-series"
  },
  {
    "objectID": "src/guidelines/IT_Architecture_Principles_and_Implementation_Guidelines.html#reusability",
    "href": "src/guidelines/IT_Architecture_Principles_and_Implementation_Guidelines.html#reusability",
    "title": "IT Architecture Principles and Implementation Guidelines",
    "section": "4.2 Reusability",
    "text": "4.2 Reusability\nThe principle of reusability is detailed in the following sub-principles:\n\n\n\n\n\n\n\nReusability 1:\nIT solutions should be open-ended equipped with APIs\n\n\n\n\nWhat:\nIT solutions should be open-ended equipped with APIs through which functionality or data key for the end user may be accessed\n\n\nWhy:\nTo ensure that further work benefit from existing solutions it is paramount that systems delivered are open ended. Future work can hereby utilize and benefit from previous work. Delivered IT solutions should form part of the overall IT ecosystem of the EEA CLMS program so that the “whole is greater than the sum”\n\n\nConsequence:\nIT solutions should be provided with APIs which access key functionality of the IT solutions\n\n\nExample:\nA webservice provided, which publishes geospatial data, has an API Rest service, which grants users direct access to the data\n\n\n\n\n\n\n\n\n\n\nReusability 2:\nScripts used in production must be delivered as part of IT solutions\n\n\n\n\nWhat:\nScripts should be delivered with code so that they may be used as templates for the end user for further development\n\n\nWhy:\nData, conditions, or requirements may change for an IT solution. To ensure that such changes can be accommodated the underlying script must be possible to modify to reflect and support such changes\n\n\nConsequence:\nScripts used in the productions form part of the final deliverable\n\n\nExample:\nIT delivery, consisting of several building blocks, shall be provided with scripts, included with the final delivery of the code, so that the end users of the system could modify, expand, or adopt the building blocks/modules to suit specific needs or add new features\n\n\n\n\n\n\n\n\n\n\nReusability 3:\nDocumentation of IT solutions are to be provided\n\n\n\n\nWhat:\nDocumentation of the developed IT solutions must be provided. The requested documentation shall also be provided in quarto markdown format on the dedicated EEA GitHub repository\n\n\nWhy:\nFor the further use and improvements of the IT solution, technical documentation is paramount.\n\n\nConsequence:\nDocumentation including but not limited to System Description Document (SDD), System Deployment Document and Examples must be provided with IT solution deliverables. The requested documents shall also be provided in the quarto markdown format.\n\n\nExample:\nAn IT delivery, consisting of several building blocks, shall be provided with SDD, user guidelines, and detailed documentation of system deployment, including, but not limited to system and storage architecture, infrastructure setup, provisioning, monitoring, disaster recovery, accessibility, scalability options and performance. If requested, this documentation shall be provided in quarto markdown format on the dedicated EEA GitHub repository"
  },
  {
    "objectID": "src/guidelines/IT_Architecture_Principles_and_Implementation_Guidelines.html#transparency",
    "href": "src/guidelines/IT_Architecture_Principles_and_Implementation_Guidelines.html#transparency",
    "title": "IT Architecture Principles and Implementation Guidelines",
    "section": "4.3 Transparency",
    "text": "4.3 Transparency\nThe CLMS is funded by the EU and supports its community with data and services. As such, these products and services are to be part of the foundation for further work in the field and accessible to the community. To support this, the principle of transparency is detailed in the following subprinciples:\n\n\n\nTransparency 1:\nSource code of client specific software to be supplied with IT solution\n\n\n\n\nWhat:\nSource code including deployment and integration scripts of client specific IT solution is supplied as part of the deliverable and made publicly available under the EUPL-1.21 license\n\n\nWhy:\nTo ensure transparency, it is essential to have clear insights into the client-specific software. This enables efficient future developments and modifications\n\n\nConsequence:\nSource code of client specific software must be delivered with IT solution. The source code shall include CI/CD (Continuous Integration/Continuous Development), Docker recipes and be published under the EUPL-1.2. license\n\n\nExample:\nSource code of all the components of the specific IT solution must be delivered. Any updates or developments of the source code shall be reflected in the EEA GitHub repository, which is the main repository of the system. Moreover, the specific client IT solutions shall be published under the EUPL-1.2 license, so the openness and transparency are ensured\n\n\n\n\n\n\n\n\n\n\nTransparency 2:\nInline documentation of the source code\n\n\n\n\nWhat:\nSource code of client specific IT solution must be documented in-line\n\n\nWhy:\nTo effectuate the handover from one developer to the next inline documentation are to be included to guide the developer on the job\n\n\nConsequence:\nSource code must have inline documentation. Inline code should be formatted so that it may be easily extracted to generate online documentation\n\n\nExample:\nSource code of all the components of the IT solution must have inline documentation. The documentation shall be structured, following common conventions, and kept at a minimal, but comprehensive level\n\n\n\n\n\n\n\n\n\n\nTransparency 3:\nCommercial software used in the production/development must be attainable by the EEA or a third-party provider\n\n\n\n\nWhat:\nCommercial software which are prerequisites must be attainable on comparable terms. Such software is justified only if no open alternative exists\n\n\nWhy:\nTo ensure that further work may be carried out any prerequisites in the form of software must be attainable by the EEA or a supplier\n\n\nConsequence:\nGenerally attainable commercial software used in production must be listed when delivering an IT solution. Name of software, version, EOL and EOS to be supplied\n\n\nExample:\nAn IT solution is deploying various components and the set-up of the virtual machines that houses the components is done by means of an infrastructure as-a-code-tool. All the capabilities of the infrastructure as-a-code-tool, that require purchasing must be listed when delivering the IT solution"
  },
  {
    "objectID": "src/guidelines/IT_Architecture_Principles_and_Implementation_Guidelines.html#scalability",
    "href": "src/guidelines/IT_Architecture_Principles_and_Implementation_Guidelines.html#scalability",
    "title": "IT Architecture Principles and Implementation Guidelines",
    "section": "4.4 Scalability",
    "text": "4.4 Scalability\nThe delivered IT Solutions must be scalable to ensure future enhancements and demands. Scalability in this sense covers both scalability in functionality as well as scalability in terms of being able to handle an increased load/traffic. To this end the following scalability principles apply\n\n\n\n\n\n\n\nScalability 1:\nClient specific IT solutions should have a modular structure\n\n\n\n\nWhat:\nModular structure of client specific IT solutions is a requirement. This may be achieved using e.g. microservices\n\n\nWhy:\nA modular structure is sought to ensure further development, and updates are possible. The possibility of substituting or adding modules in an IT solution will increase the lifespan of a solution\n\n\nConsequence:\nModular architecture of IT solutions is a requisite\n\n\nExample:\nIf the client specific IT solution has, for Example, grown its user base since the launch of the solution, then scaling up shall be possible at any time – both vertically (more CPUs, RAM) and horizontally (more VMs)\n\n\n\n\n\n\n\n\n\n\nScalability 2:\nClient specific IT solutions must be able to interface with other IT solutions\n\n\n\n\nWhat:\nThe IT deliverable must be able to be used in conjunction with other deliverables to form a composite solution\n\n\nWhy:\nTo make the most of the funds available the developed solutions should form part of an IT ecosystem making up a whole\n\n\nConsequence:\nIT deliverables must be equipped with documented APIs for interfacing with other IT applications\n\n\nExample:\nA client specific product, which can be used for extracting and manipulating data, should be accessible programmatically through e.g. well documented REST services"
  },
  {
    "objectID": "src/guidelines/IT_Architecture_Principles_and_Implementation_Guidelines.html#maintainability",
    "href": "src/guidelines/IT_Architecture_Principles_and_Implementation_Guidelines.html#maintainability",
    "title": "IT Architecture Principles and Implementation Guidelines",
    "section": "4.5 Maintainability",
    "text": "4.5 Maintainability\nThe EEA aims in the CLMS program to be able to provide updated products when new data becomes available. To reduce the time to market the principle of maintainability is to be followed.\n\n\n\n\n\n\n\nMaintainability 1:\nIT solutions are to be delivered on a principle of CI/CD\n\n\n\n\nWhat:\nThe launch of new releases of IT deliverables are to be configured and managed so that new functionality is available as soon as possible. The principle of CI/CD are to be adhered to\n\n\nWhy:\nTime to market is to be reduced through an approach of maintainability of deployments as soon as possible\n\n\nConsequence:\nIT deliverables are to be supplied with a dev-ops set-up which supports CI/CD\n\n\nExample:\nA delivered IT solution is organized with a test server environment potentially a pre-production environment, used for quality assurance and continuous development, so that deployment to production can be initiated smoothly\n\n\n\n\n\n\n\n\n\n\nMaintainability 2:\nIT solutions are to be Dockerized or similar\n\n\n\n\nWhat:\nThe use of container technology is encouraged\n\n\nWhy:\nContainer technology eases the work of moving IT solutions around the IT infrastructure making deployment easier to automate\n\n\nConsequence:\nIT solutions are to be deployed using Dockerization or similar\n\n\nExample:\nSoftware components of the client specific IT solution shall be provided as docker images so that deployment is flexible with respect to hardware\n\n\n\n\n\n\n\n\n\n\nMaintainability 3:\nTests are to be organised so that they may be automated\n\n\n\n\nWhat:\nTests are to be structured so that they may be easily automated\n\n\nWhy:\nTo ensure that the CI/CD process does not introduce bugs or deployment failures, tests are to be automated so that they can continuously be run to ensure the quality of the solution and its possible enhancements\n\n\nConsequence:\nTests are to be delivered so that they can be automated\n\n\nExample:\nThe delivered solution has in the test phase run through a number of tests e.g. unit tests and result verification tests. These will be the basis for automated regression tests\n\n\n\n\n\n\n\n\n\n\nMaintainability 4:\nIT solutions are to be regularly assessed\n\n\n\n\nWhat:\nIT solutions are to be automatically monitored with a notification service, and their performance routinely evaluated to ensure optimal functioning\n\n\nWhy:\nRegular assessments ensure that IT solutions can be maintained so as to meet emerging needs, threats and technological advancements\n\n\nConsequence:\nIT solution’s scalability, security, and overall performance are continuously monitored and evaluated to address performance and or security issues\n\n\nExample:\nThe delivered IT solution and its associated dependencies are regularly assessed and evaluated. The evaluation process should also account for advancements in technology and track developments to ensure the solution remains relevant and effective"
  },
  {
    "objectID": "src/guidelines/IT_Architecture_Principles_and_Implementation_Guidelines.html#it-security",
    "href": "src/guidelines/IT_Architecture_Principles_and_Implementation_Guidelines.html#it-security",
    "title": "IT Architecture Principles and Implementation Guidelines",
    "section": "4.6 IT security",
    "text": "4.6 IT security\nThe IT solutions of the CLMS program shall ensure system integrity against various security threats, protection of the data, and maintenance of privacy. The following sub-principals are to be followed:\n\n\n\n\n\n\n\nIT security 1:\nIncorporate security considerations from the beginning of the system development\n\n\n\n\nWhat:\nEnsure security is integrated into all stages of the system development lifecycle, from planning to deployment\n\n\nWhy:\nEarly integration of security measures reduces vulnerabilities, lowers costs associated with late-stage fixes, and ensures robust protection against threats\n\n\nConsequence:\nThreat modelling and security assessments need to be conducted from the start, as well as allocation of resources for ongoing security reviews and testing\n\n\nExample:\nStandard aspects such as two factor authentication, protection against SQL injection, encryption of sensitive data, etc.\n\n\n\n\n\n\n\n\n\n\nIT security 2:\nCompliance with relevant laws, regulations and industry standards\n\n\n\n\nWhat:\nIT-solutions must adhere to legal requirements, industry standards, and regulations e.g. EUDPR, ISO\n\n\nWhy:\nCompliance ensures legal and regulatory adherence, builds trust, protects sensitive data, and mitigates risk of legal penalties and breaches\n\n\nConsequence:\nIT deliverables need to incorporate robust security measures, include documentation of compliance efforts, and ensure features and processes aligned with legal and industry measures\n\n\nExample:\nData handling agreements must be in place, consideration of server location in EU, etc.\n\n\n\n\n\n\n\n\n\n\nIT security 3:\nEnsuring that users and systems have appropriate permissions based on their roles and responsibilities\n\n\n\n\nWhat:\nImplement role-based access control (RBAC) to manage user and system permissions according to their roles\n\n\nWhy:\nIt prevents unauthorized access, minimizes the risk of data breaches, and ensures that users only have access to the information necessary for their roles\n\n\nConsequence:\nThe provider will need to define clear roles and responsibilities, implement RBAC policies, regularly review and update access controls\n\n\nExample:\nA delivered IT solution has role-based accesses, which ensures that only Admin-Users are allowed to manage (add, edit, activate, inactivate) users and organisations. Also, only administrator can view and edit any ingestion and extraction within the system to support users if they need any help"
  },
  {
    "objectID": "src/guidelines/IT_Architecture_Principles_and_Implementation_Guidelines.html#resilience",
    "href": "src/guidelines/IT_Architecture_Principles_and_Implementation_Guidelines.html#resilience",
    "title": "IT Architecture Principles and Implementation Guidelines",
    "section": "4.7 Resilience",
    "text": "4.7 Resilience\n\n\n\n\n\n\n\nResilience 1:\nIT solution should have a disaster recovery plan\n\n\n\n\nWhat:\nIT solution should have a well-defined process of restoring IT systems, data, and operations following a disruption\n\n\nWhy:\nTo ensure that the IT solution and data are recoverable after an unforeseen event\n\n\nConsequence:\nIT deliverables will be provided with well-prepared disaster recovery plan that will ensure a rapid restoration of services and data integrity, and minimize damage\n\n\nExample:\nA delivered IT solution has a disaster recovery plan that includes backup protocols, data replication, and recovery timelines\n\n\n\n\n\n\n\n\n\n\nResilience 2:\nEnsuring IT solution continuity\n\n\n\n\nWhat:\nIT solution is designed and implemented in a way that ensures continuous operation during a disruption\n\n\nWhy:\nTo maintain critical operations with a minimal downtime, even when confronted with unforeseen events\n\n\nConsequence:\nIT deliverables are designed for high availability, incorporating redundancy so that in case of a disruption/failure, restore service can immediately take over, minimizing downtime and ensuring continuous operation\n\n\nExample:\nIn the event of a system failure or disruption of the delivered IT solution, restore service automatically take over to maintain service continuity. For instance, if a primary system goes down, a secondary system activates, ensuring that users experience no downtime."
  },
  {
    "objectID": "src/guidelines/IT_Architecture_Principles_and_Implementation_Guidelines.html#footnotes",
    "href": "src/guidelines/IT_Architecture_Principles_and_Implementation_Guidelines.html#footnotes",
    "title": "IT Architecture Principles and Implementation Guidelines",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nEuropean Union Public Licence - European Commission (europa.eu)↩︎"
  },
  {
    "objectID": "src/index.html",
    "href": "src/index.html",
    "title": "Documents",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nTitle\n\n\n\n\n\n\nGuidelines\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "src/guidelines/IT_Architecture_Principles_and_Implementation_Guidelines_test.html#architecture",
    "href": "src/guidelines/IT_Architecture_Principles_and_Implementation_Guidelines_test.html#architecture",
    "title": "IT Architecture Principles and Implementation Guidelines test",
    "section": "4.1 Architecture",
    "text": "4.1 Architecture\nFoundational and design principles for maintaining sound infrastructure and IT solution architecture. These sub-principles addresses best-practices and industry standard design patterns.\n\n\n\n\n\n\n\nArchitecture 1 (Scalability 1):\nClient specific IT solutions should have a modular structure\n\n\n\n\nWhat:\nModular structure of client specific IT solutions is a requirement. This may be achieved using e.g. microservice architecture\n\n\nWhy:\nA modular structure is sought to ensure further development, and updates are possible. The possibility of substituting or adding modules in an IT solution will increase the lifespan of a solution and increase scalability\n\n\nConsequence:\nModular architecture of IT solutions is a requisite\n\n\nExample:\nIf the client specific IT solution has, for Example, grown its user base since the launch of the solution, then scaling up shall be possible at any time – scaling containers, vertically (more CPUs, RAM) and horizontally (more VMs)\n\n\n\n\n\n\n\n\n\n\nArchitecture 2 (Maintainability 2):\nIT solutions are to be Dockerized or similar\n\n\n\n\nWhat:\nThe use of container technology is encouraged\n\n\nWhy:\nContainerization is crucial for building scalable IT solutions and container technology eases the work of moving IT solutions around the IT infrastructure making deployment easier to automate\n\n\nConsequence:\nIT solutions are to be deployed using Docker containers or similar\n\n\nExample:\nSoftware components of the client specific IT solution shall be provided as docker containers so that deployment is flexible with respect to hardware\n\n\n\n\n\n\n\n\n\n\nArchitecture 3 (Scalability 2):\nClient specific IT solutions must be able to interface with other IT solutions\n\n\n\n\nWhat:\nThe IT deliverable must be able to be used in conjunction with other deliverables to form a composite solution\n\n\nWhy:\nTo make the most of the funds available the developed solutions should form part of an IT ecosystem making up a whole\n\n\nConsequence:\nIT deliverables must be equipped with documented APIs for interfacing with other IT applications\n\n\nExample:\nA client specific product, which can be used for extracting and manipulating data, should be accessible programmatically through e.g. well documented REST services\n\n\n\n\n\n\n\n\n\n\nArchitecture 4:\nIT solutions should be cloud agnostic\n\n\n\n\nWhat:\nIf the IT solution is built for cloud environments, measures must be taken to make the solution cloud agnostic.\n\n\nWhy:\nVendor lock-in must be avoided to remove vendor specific dependencies, making the IT solution easier to migrate to a different cloud vendor\n\n\nConsequence:\nIT solutions must minimize the usage of vendor specific functionality and non-standardized infrastructure\n\n\nExample:\nAn IT solution that makes use of serverless functions should be built in a way that allows for using another vendors serverless functionality with little or no changes in case of migrating from one platform to another"
  },
  {
    "objectID": "src/guidelines/IT_Architecture_Principles_and_Implementation_Guidelines_test.html#reproducibility",
    "href": "src/guidelines/IT_Architecture_Principles_and_Implementation_Guidelines_test.html#reproducibility",
    "title": "IT Architecture Principles and Implementation Guidelines test",
    "section": "4.2 Reproducibility",
    "text": "4.2 Reproducibility\nThe overarching principle of reproducibility is further unfolded below in the following sub-principles:\n\n\n\n\n\n\n\nReproducibility 1:\nDescription of workflows must be provided\n\n\n\n\nWhat:\nDeliverables which are a result of pre-processing of data must be provided with a description of the workflow for the pre-processing\n\n\nWhy:\nTo ensure that the deliverable can be re-produced, details must be provided on how this can be achieved\n\n\nConsequence:\nDescriptions of pre-processing workflow steps are to be provided with deliverables. Ideally the workflows delivered as scripts or similar. At a minimum documentation of how the workflows are to be set up is to be provided\n\n\nExample:\nA delivery that includes a web application, shall include description of the build process, such as the compilation of source code, packaging of the application, and deployment steps. This for instance could include details on the specific versions of tools used (e.g. Node.js, Docker etc.)\n\n\n\n\n\n\n\n\n\n\nReproducibility 2:\nData sources to be supplied with deliverables\n\n\n\n\nWhat:\nIT solutions which utilize data sources must supply the data sources\n\n\nWhy:\nTo ensure that the deliverable can be re-produced details are required on data sources used along with any enrichment which have been applied to the data source\n\n\nConsequence:\nData source location must be provided if data are publicly available. If data are not accessible to the CLMS, the data are to be provided as part of the deliverable\n\n\nExample:\nIf the software relies on a proprietary weather data API that is not publicly accessible, the data, or at least a sample dataset, should be provided with the delivery. If the API is publicly available, detailed instructions on how to access it (e.g., API keys, endpoint URLs) must be included\n\n\n\n\n\n\n\n\n\n\nReproducibility 3:\nList of software used in development of IT solution to be provided\n\n\n\n\nWhat:\nThe software products which have been used in the development of the software are to be listed as part of the deliverable\n\n\nWhy:\nTo ensure that the IT solution can be further developed details are required of the software components/products that were used in the development\n\n\nConsequence:\nList of software development tools used in the production to be provided. Further for client specific developments the source code must also be provided\n\n\nExample:\nA system consisting of several building blocks, such as User Interface, backend, importer, and exporter modules, shall be provided with a list of software development tools, used for production of these building blocks and modules\n\n\n\n\n\n\n\n\n\n\nReproducibility 4:\nAutomation tool/scripts used in the production of the IT solution must be provided\n\n\n\n\nWhat:\nIT solutions which include automation scripts/workflows in the development must supply these scripts as part of the deliverable\n\n\nWhy:\nAutomation scripts used in development are viewed as part of the deliverable and are required for reproduction of the solution\n\n\nConsequence:\nAutomation scripts whether as stand-alone scripts or as a configuration of standard/commercial software must be provided as part of the deliverable\n\n\nExample:\nIf the IT deliverable includes an automatic backup that generates full backups in certain increments, then the automation scripts behind the backup generation must be provided as part of the deliverable, so that they could be recreated\n\n\n\n\n\n\n\n\n\n\nReproducibility 5:\nIf a solution includes outcomes of pre-executed algorithms the prerequisites for running the algorithms must be provided\n\n\n\n\nWhat:\nTo ensure reproducibility, the algorithms must be provided either as pseudo code or as source code\n\n\nWhy:\nThe foundation of the IT solution must be re-producible to ensure future enhancements are possible say if new insights/data become available also after the end of the contractual agreement\n\n\nConsequence:\nSupplier must as part of the deliverable also detail any algorithms which form the basis of the solution\n\n\nExample:\nA spatial product, providing a detailed pan-European wall to wall 10-meter spatial resolution raster product, that is based on a supervised classification of satellite image time-series. The supplier must provide a detailed description of the algorithm that was used for classifying satellite-imagery time-series"
  },
  {
    "objectID": "src/guidelines/IT_Architecture_Principles_and_Implementation_Guidelines_test.html#reusability",
    "href": "src/guidelines/IT_Architecture_Principles_and_Implementation_Guidelines_test.html#reusability",
    "title": "IT Architecture Principles and Implementation Guidelines test",
    "section": "4.3 Reusability",
    "text": "4.3 Reusability\nThe principle of reusability is detailed in the following sub-principles:\n\n\n\n\n\n\n\nReusability 1:\nIT solutions should be open-ended equipped with APIs\n\n\n\n\nWhat:\nIT solutions should be open-ended equipped with APIs through which functionality or data key for the end user may be accessed\n\n\nWhy:\nTo ensure that further work benefit from existing solutions it is paramount that systems delivered are open ended. Future work can hereby utilize and benefit from previous work. Delivered IT solutions should form part of the overall IT ecosystem of the EEA CLMS program so that the “whole is greater than the sum”\n\n\nConsequence:\nIT solutions should be provided with APIs which access key functionality of the IT solutions\n\n\nExample:\nA webservice provided, which publishes geospatial data, has an API Rest service, which grants users direct access to the data\n\n\n\n\n\n\n\n\n\n\nReusability 2:\nScripts used in production must be delivered as part of IT solutions\n\n\n\n\nWhat:\nScripts should be delivered with code so that they may be used as templates for the end user for further development\n\n\nWhy:\nData, conditions, or requirements may change for an IT solution. To ensure that such changes can be accommodated the underlying script must be possible to modify to reflect and support such changes\n\n\nConsequence:\nScripts used in the productions form part of the final deliverable\n\n\nExample:\nIT delivery, consisting of several building blocks, shall be provided with scripts, included with the final delivery of the code, so that the end users of the system could modify, expand, or adopt the building blocks/modules to suit specific needs or add new features"
  },
  {
    "objectID": "src/guidelines/IT_Architecture_Principles_and_Implementation_Guidelines_test.html#transparency",
    "href": "src/guidelines/IT_Architecture_Principles_and_Implementation_Guidelines_test.html#transparency",
    "title": "IT Architecture Principles and Implementation Guidelines test",
    "section": "4.4 Transparency",
    "text": "4.4 Transparency\nThe CLMS is funded by the EU and supports its community with data and services. As such, these products and services are to be part of the foundation for further work in the field and accessible to the community. To support this, the principle of transparency is detailed in the following subprinciples:\n\n\n\nTransparency 1*:\nSource code of client specific software to be supplied with IT solution\n\n\n\n\nWhat:\nSource code of client specific IT solution is supplied as part of the deliverable and made publicly available under the EUPL-1.21 license\n\n\nWhy:\nTo ensure transparency, it is essential to have clear insights into the client-specific software. This enables efficient future developments and modifications\n\n\nConsequence:\nSource code of client specific software must be delivered with IT solution. The source code shall include Docker recipes and scripts for building the source code and be published under the EUPL-1.2. license\n\n\nExample:\nSource code of all the components of the specific IT solution must be delivered. Any updates or developments of the source code shall be reflected in the EEA GitHub repository, which is the main repository of the system. Moreover, the specific client IT solutions shall be published under the EUPL-1.2 license, so the openness and transparency are ensured\n\n\n\n\n\n\n\n\n\n\nTransparency 2:\nInline documentation of the source code\n\n\n\n\nWhat:\nSource code of client specific IT solution must be documented in-line\n\n\nWhy:\nTo effectuate the handover from one developer to the next inline documentation are to be included to guide the developer on the job\n\n\nConsequence:\nSource code must have inline documentation. Inline code should be formatted so that it may be easily extracted to generate online documentation\n\n\nExample:\nSource code of all the components of the IT solution must have inline documentation. The documentation shall be structured, following common conventions, and kept at a minimal, but comprehensive level\n\n\n\n\n\n\n\n\n\n\nTransparency 3*:\nCommercial software used in the production must be attainable by the EEA or a third-party provider\n\n\n\n\nWhat:\nCommercial software which are prerequisites must be attainable on comparable terms. Such software is justified only if no open alternative exists\n\n\nWhy:\nTo ensure that further work may be carried out any prerequisites in the form of software must be attainable by the EEA or a supplier\n\n\nConsequence:\nGenerally attainable commercial software used in production must be listed when delivering an IT solution. Name of software, version, EOL and EOS to be supplied\n\n\nExample:\nAn IT solution is deploying various components and the set-up of the virtual machines that houses the components is done by means of an infrastructure as-a-code-tool. All the capabilities of the infrastructure as-a-code-tool, that require purchasing must be listed when delivering the IT solution"
  },
  {
    "objectID": "src/guidelines/IT_Architecture_Principles_and_Implementation_Guidelines_test.html#maintainability",
    "href": "src/guidelines/IT_Architecture_Principles_and_Implementation_Guidelines_test.html#maintainability",
    "title": "IT Architecture Principles and Implementation Guidelines test",
    "section": "4.5 Maintainability",
    "text": "4.5 Maintainability\nThe EEA aims in the CLMS program to be able to provide updated products when new data becomes available. To reduce the time to market the principle of maintainability is to be followed.\n\n\n\n\n\n\n\nMaintainability 1:\nIT solutions are to be delivered on a principle of CI/CD\n\n\n\n\nWhat:\nThe launch of new releases of IT deliverables are to be configured and managed so that new functionality is available as soon as possible. The principle of CI/CD are to be adhered to\n\n\nWhy:\nTime to market is to be reduced through an approach of maintainability of deployments as soon as possible\n\n\nConsequence:\nIT deliverables are to be supplied with a dev-ops set-up which supports CI/CD\n\n\nExample:\nA delivered IT solution is organized with a test server environment potentially a pre-production environment, used for quality assurance and continuous development, so that deployment to production can be initiated smoothly\n\n\n\n\n\n\n\n\n\n\nMaintainability 2:\nTests are to be organised so that they may be automated\n\n\n\n\nWhat:\nTests are to be structured so that they may be easily automated\n\n\nWhy:\nTo ensure that the build and CI/CD process does not introduce bugs or deployment failures, tests are to be automated so that they can continuously be run to ensure the quality of the solution and its possible enhancements\n\n\nConsequence:\nTests are to be delivered so that they can be automated\n\n\nExample:\nThe delivered solution has in the test phase run through a number of tests e.g. unit tests and result verification tests. These will be the basis for automated regression tests\n\n\n\n\n\n\n\n\n\n\nMaintainability 3 (Reusability 3):\nDocumentation of IT solutions are to be provided\n\n\n\n\nWhat:\nDocumentation of the developed IT solutions must be provided. The requested documentation shall also be provided in quarto markdown format on the dedicated EEA GitHub repository\n\n\nWhy:\nFor the further use and improvements of the IT solution, technical documentation is paramount.\n\n\nConsequence:\nDocumentation including but not limited to System Description Document (SDD), System Deployment Document and Examples must be provided with IT solution deliverables. The requested documents shall also be provided in the quarto markdown format.\n\n\nExample:\nAn IT delivery, consisting of several building blocks, shall be provided with SDD, user guidelines, and detailed documentation of system deployment, including, but not limited to system and storage architecture, infrastructure setup, provisioning, monitoring, disaster recovery, accessibility, scalability options and performance. If requested, this documentation shall be provided in quarto markdown format on the dedicated EEA GitHub repository\n\n\n\n\n\n\n\n\n\n\nMaintainability 4:\nCommercial software used in the development must be attainable by the EEA or a third-party provider\n\n\n\n\nWhat:\nCommercial software which are prerequisites must be attainable on comparable terms. Such software is justified only if no open alternative exists\n\n\nWhy:\nTo ensure that further work may be carried out any prerequisites in the form of software must be attainable by the EEA or a supplier\n\n\nConsequence:\nGenerally attainable commercial software used in development or production must be listed when delivering an IT solution. Name of software, version, EOL and EOS to be supplied\n\n\nExample:\nAn IT solution using commercial components or tools, like PDF generator, code analysis tools, data transformation software must be listed\n\n\n\n\n\n\n\n\n\n\nMaintainability 5:\nDeployment and integration scripts of client specific software to be supplied with IT solution\n\n\n\n\nWhat:\nDeployment and integration scripts of client specific IT solution is supplied as part of the deliverable\n\n\nWhy:\nTo ensure transparency and efficient maintainability, it is essential to have clear insights into the build and deploy processes of client-specific software. This enables efficient future developments and modifications\n\n\nConsequence:\nScripts or playbooks and documentation for CI/CD (Continuous Integration/Continuous Development), Docker recipes and build scripts must be delivered\n\n\nExample:\nSource code of all the components of the specific IT solution must be delivered. Any updates or developments of the source code shall be reflected in the EEA GitHub repository, which is the main repository of the system. Moreover, the specific client IT solutions shall be published under the EUPL-1.2 license, so the openness and transparency are ensured"
  },
  {
    "objectID": "src/guidelines/IT_Architecture_Principles_and_Implementation_Guidelines_test.html#observability",
    "href": "src/guidelines/IT_Architecture_Principles_and_Implementation_Guidelines_test.html#observability",
    "title": "IT Architecture Principles and Implementation Guidelines test",
    "section": "4.6 Observability",
    "text": "4.6 Observability\nIT solutions of the EEA CLMS must collect relevant metrics for monitoring and assessment, to detect any issues and have predictable operation of the solutions.\n\n\n\n\n\n\n\nObservability 1:\nIT solutions are to be regularly assessed\n\n\n\n\nWhat:\nIT solutions are to be automatically monitored with a notification service, and their performance routinely evaluated to ensure optimal functioning\n\n\nWhy:\nRegular assessments ensure that IT solutions can be maintained so as to meet emerging needs, threats and technological advancements\n\n\nConsequence:\nIT solution’s scalability, security, and overall performance are continuously monitored and evaluated to address performance and security issues\n\n\nExample:\nThe delivered IT solution and its associated dependencies are regularly assessed and evaluated. The evaluation process should also account for advancements in technology and track developments to ensure the solution remains relevant and effective\n\n\n\n\n\n\n\n\n\n\nObservability 2:\nContinuous monitoring of metrics\n\n\n\n\nWhat:\nIT solutions logs metrics on it’s components and containers for tracking system performance and application health\n\n\nWhy:\nContinuous monitoring gives a data-driven insight of a solutions components performance and health and provide the metrics for automatically scaled solutions and self-recovering solutions\n\n\nConsequence:\nComponents and containers in the solution logs relevant metrics to be collected and monitored. As minimum liveliness and readiness should be logged\n\n\nExample:\nA software solution with an orhcestrating component and a worker component use liveliness and readiness to monitor if the solution is healthy and automatically scale the number of worker instances according to the readiness metrics"
  },
  {
    "objectID": "src/guidelines/IT_Architecture_Principles_and_Implementation_Guidelines_test.html#it-security",
    "href": "src/guidelines/IT_Architecture_Principles_and_Implementation_Guidelines_test.html#it-security",
    "title": "IT Architecture Principles and Implementation Guidelines test",
    "section": "4.7 IT security",
    "text": "4.7 IT security\nThe IT solutions of the CLMS program shall ensure system integrity against various security threats, protection of the data, and maintenance of privacy. The following sub-principals are to be followed:\n\n\n\n\n\n\n\nIT security 1:\nIncorporate security considerations from the beginning of the system development\n\n\n\n\nWhat:\nEnsure security is integrated into all stages of the system development lifecycle, from planning to deployment\n\n\nWhy:\nEarly integration of security measures reduces vulnerabilities, lowers costs associated with late-stage fixes, and ensures robust protection against threats\n\n\nConsequence:\nThreat modelling and security assessments need to be conducted from the start, as well as allocation of resources for ongoing security reviews and testing\n\n\nExample:\nStandard aspects such as two factor authentication, protection against SQL injection, encryption of sensitive data, no root users in containers, etc.\n\n\n\n\n\n\n\n\n\n\nIT security 2:\nCompliance with relevant laws, regulations and industry standards\n\n\n\n\nWhat:\nIT-solutions must adhere to legal requirements, industry standards, and regulations e.g. EUDPR, ISO\n\n\nWhy:\nCompliance ensures legal and regulatory adherence, builds trust, protects sensitive data, and mitigates risk of legal penalties and breaches\n\n\nConsequence:\nIT deliverables need to incorporate robust security measures, include documentation of compliance efforts, and ensure features and processes aligned with legal and industry measures\n\n\nExample:\nData handling agreements must be in place, consideration of server location in EU, etc.\n\n\n\n\n\n\n\n\n\n\nIT security 3:\nEnsuring that users and systems have appropriate permissions based on their roles and responsibilities\n\n\n\n\nWhat:\nImplement role-based access control (RBAC) to manage user and system permissions according to their roles\n\n\nWhy:\nIt prevents unauthorized access, minimizes the risk of data breaches, and ensures that users only have access to the information necessary for their roles\n\n\nConsequence:\nThe provider will need to define clear roles and responsibilities, implement RBAC policies, regularly review and update access controls\n\n\nExample:\nA delivered IT solution has role-based accesses, which ensures that only Admin-Users are allowed to manage (add, edit, activate, inactivate) users and organisations. Also, only administrator can view and edit any ingestion and extraction within the system to support users if they need any help\n\n\n\n\n\n\n\n\n\n\nIT security 4:\nLogging warnings and errors\n\n\n\n\nWhat:\nThe IT solution must log all errors, warnings and events with audit relevance from every component to a file based storage\n\n\nWhy:\nIn order to inspect system events and detect potential security incidents is crucial for maintaining the system integrity and resilience. Log information must not be revealed to the user, but must be stored internally.\n\n\nConsequence:\nAll components of an IT solution must log audit, error and warning information coming from executing the code of the solution\n\n\nExample:\nA user logs in to an application, trying to download a large dataset for processing in the application, the system encounters some fatal errors with the download. Login, user activity and technical error information and severity is logged to a persistent file storage."
  },
  {
    "objectID": "src/guidelines/IT_Architecture_Principles_and_Implementation_Guidelines_test.html#resilience",
    "href": "src/guidelines/IT_Architecture_Principles_and_Implementation_Guidelines_test.html#resilience",
    "title": "IT Architecture Principles and Implementation Guidelines test",
    "section": "4.8 Resilience",
    "text": "4.8 Resilience\n\n\n\n\n\n\n\nResilience 1:\nIT solution should have a disaster recovery plan\n\n\n\n\nWhat:\nIT solution should have a well-defined process of restoring IT systems, data, and operations following a disruption\n\n\nWhy:\nTo ensure that the IT solution and data are recoverable after an unforeseen event\n\n\nConsequence:\nIT deliverables will be provided with well-prepared disaster recovery plan that will ensure a rapid restoration of services and data integrity, and minimize damage\n\n\nExample:\nA delivered IT solution has a disaster recovery plan that includes backup protocols, data replication, and recovery timelines\n\n\n\n\n\n\n\n\n\n\nResilience 2:\nEnsuring IT solution continuity\n\n\n\n\nWhat:\nIT solution is designed and implemented in a way that ensures continuous operation during a disruption\n\n\nWhy:\nTo maintain critical operations with a minimal downtime, even when confronted with unforeseen events\n\n\nConsequence:\nIT deliverables are designed for high availability, incorporating redundancy so that in case of a disruption/failure, restore service can immediately take over, minimizing downtime and ensuring continuous operation\n\n\nExample:\nIn the event of a system failure or disruption of the delivered IT solution, restore service automatically take over to maintain service continuity. For instance, if a primary system goes down, a secondary system activates, ensuring that users experience no downtime."
  },
  {
    "objectID": "src/guidelines/IT_Architecture_Principles_and_Implementation_Guidelines_test.html#section",
    "href": "src/guidelines/IT_Architecture_Principles_and_Implementation_Guidelines_test.html#section",
    "title": "IT Architecture Principles and Implementation Guidelines test",
    "section": "4.9 ",
    "text": "4.9"
  },
  {
    "objectID": "src/guidelines/IT_Architecture_Principles_and_Implementation_Guidelines_test.html#footnotes",
    "href": "src/guidelines/IT_Architecture_Principles_and_Implementation_Guidelines_test.html#footnotes",
    "title": "IT Architecture Principles and Implementation Guidelines test",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nEuropean Union Public Licence - European Commission (europa.eu)↩︎"
  }
]